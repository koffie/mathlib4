/-
Copyright (c) 2021 Ashvni Narayanan. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Ashvni Narayanan, Anne Baanen
-/
import Mathlib.Algebra.CharP.Algebra
import Mathlib.RingTheory.DedekindDomain.IntegralClosure
import Mathlib.RingTheory.Discriminant
import Mathlib.RingTheory.Localization.NormTrace

#align_import number_theory.number_field.basic from "leanprover-community/mathlib"@"f0c8bf9245297a541f468be517f1bde6195105e9"

/-!
# Number fields
This file defines a number field and the ring of integers corresponding to it.

## Main definitions
 - `NumberField` defines a number field as a field which has characteristic zero and is finite
    dimensional over ‚Ñö.
 - `ringOfIntegers` defines the ring of integers (or number ring) corresponding to a number field
    as the integral closure of ‚Ñ§ in the number field.

## Implementation notes
The definitions that involve a field of fractions choose a canonical field of fractions,
but are independent of that choice.

## References
* [D. Marcus, *Number Fields*][marcus1977number]
* [J.W.S. Cassels, A. Fr√∂lich, *Algebraic Number Theory*][cassels1967algebraic]
* [P. Samuel, *Algebraic Theory of Numbers*][samuel1970algebraic]

## Tags
number field, ring of integers
-/


/-- A number field is a field which has characteristic zero and is finite
dimensional over ‚Ñö. -/
class NumberField (K : Type _) [Field K] : Prop where
  [to_charZero : CharZero K]
  [to_finiteDimensional : FiniteDimensional ‚Ñö K]
#align number_field NumberField

open Function Module

open scoped Classical BigOperators nonZeroDivisors

/-- `‚Ñ§` with its usual ring structure is not a field. -/
theorem Int.not_isField : ¬¨IsField ‚Ñ§ := fun h =>
  Int.not_even_one <|
    (h.mul_inv_cancel two_ne_zero).imp fun a => by rw [‚Üê two_mul]; exact Eq.symm
#align int.not_is_field Int.not_isField

namespace NumberField

variable (K L : Type _) [Field K] [Field L] [nf : NumberField K]

-- See note [lower instance priority]
attribute [instance] NumberField.to_charZero NumberField.to_finiteDimensional

protected theorem isAlgebraic : Algebra.IsAlgebraic ‚Ñö K :=
  Algebra.isAlgebraic_of_finite _ _
#align number_field.is_algebraic NumberField.isAlgebraic

/-- The ring of integers (or number ring) corresponding to a number field
is the integral closure of ‚Ñ§ in the number field. -/
def ringOfIntegers :=
  integralClosure ‚Ñ§ K
#align number_field.ring_of_integers NumberField.ringOfIntegers

scoped notation "ùìû" => NumberField.ringOfIntegers

theorem mem_ringOfIntegers (x : K) : x ‚àà ùìû K ‚Üî IsIntegral ‚Ñ§ x :=
  Iff.rfl
#align number_field.mem_ring_of_integers NumberField.mem_ringOfIntegers

theorem isIntegral_of_mem_ringOfIntegers {K : Type _} [Field K] {x : K} (hx : x ‚àà ùìû K) :
    IsIntegral ‚Ñ§ (‚ü®x, hx‚ü© : ùìû K) := by
  obtain ‚ü®P, hPm, hP‚ü© := hx
  refine' ‚ü®P, hPm, _‚ü©
  rw [‚Üê Polynomial.aeval_def, ‚Üê Subalgebra.coe_eq_zero, Polynomial.aeval_subalgebra_coe,
    Polynomial.aeval_def, Subtype.coe_mk, hP]
#align number_field.is_integral_of_mem_ring_of_integers NumberField.isIntegral_of_mem_ringOfIntegers

/-- Given an algebra between two fields, create an algebra between their two rings of integers. -/
instance inst_ringOfIntegersAlgebra [Algebra K L] : Algebra (ùìû K) (ùìû L) :=
  RingHom.toAlgebra
    { toFun := fun k => ‚ü®algebraMap K L k, IsIntegral.algebraMap k.2‚ü©
      map_zero' := Subtype.ext <| by simp only [Subtype.coe_mk, Subalgebra.coe_zero, map_zero]
      map_one' := Subtype.ext <| by simp only [Subtype.coe_mk, Subalgebra.coe_one, map_one]
      map_add' := fun x y =>
        Subtype.ext <| by simp only [map_add, Subalgebra.coe_add, Subtype.coe_mk]
      map_mul' := fun x y =>
        Subtype.ext <| by simp only [Subalgebra.coe_mul, map_mul, Subtype.coe_mk] }
#align number_field.ring_of_integers_algebra NumberField.inst_ringOfIntegersAlgebra

-- no diamond
example : Algebra.id (ùìû K) = inst_ringOfIntegersAlgebra K K := rfl

namespace RingOfIntegers

variable {K}

instance [NumberField K] : IsFractionRing (ùìû K) K :=
  integralClosure.isFractionRing_of_finite_extension ‚Ñö _

instance : IsIntegralClosure (ùìû K) ‚Ñ§ K :=
  integralClosure.isIntegralClosure _ _

instance [NumberField K] : IsIntegrallyClosed (ùìû K) :=
  integralClosure.isIntegrallyClosedOfFiniteExtension ‚Ñö

theorem isIntegral_coe (x : ùìû K) : IsIntegral ‚Ñ§ (x : K) :=
  x.2
#align number_field.ring_of_integers.is_integral_coe NumberField.RingOfIntegers.isIntegral_coe

theorem map_mem {F L : Type _} [Field L] [CharZero K] [CharZero L] [AlgHomClass F ‚Ñö K L] (f : F)
    (x : ùìû K) : f x ‚àà ùìû L :=
  (mem_ringOfIntegers _ _).2 <| map_isIntegral_int f <| RingOfIntegers.isIntegral_coe x
#align number_field.ring_of_integers.map_mem NumberField.RingOfIntegers.map_mem

/-- The ring of integers of `K` are equivalent to any integral closure of `‚Ñ§` in `K` -/
protected noncomputable def equiv (R : Type _) [CommRing R] [Algebra R K]
    [IsIntegralClosure R ‚Ñ§ K] : ùìû K ‚âÉ+* R :=
  (IsIntegralClosure.equiv ‚Ñ§ R K _).symm.toRingEquiv
#align number_field.ring_of_integers.equiv NumberField.RingOfIntegers.equiv

variable (K)

instance : CharZero (ùìû K) :=
  CharZero.of_module _ K

instance : IsNoetherian ‚Ñ§ (ùìû K) :=
  IsIntegralClosure.isNoetherian _ ‚Ñö K _

/-- The ring of integers of a number field is not a field. -/
theorem not_isField : ¬¨IsField (ùìû K) := by
  have h_inj : Function.Injective (algebraMap ‚Ñ§ (ùìû K)) := RingHom.injective_int (algebraMap ‚Ñ§ (ùìû K))
  intro hf
  exact Int.not_isField
    (((IsIntegralClosure.isIntegral_algebra ‚Ñ§ K).isField_iff_isField h_inj).mpr hf)
#align number_field.ring_of_integers.not_is_field NumberField.RingOfIntegers.not_isField

instance : IsDedekindDomain (ùìû K) :=
  IsIntegralClosure.isDedekindDomain ‚Ñ§ ‚Ñö K _

instance : Free ‚Ñ§ (ùìû K) :=
  IsIntegralClosure.module_free ‚Ñ§ ‚Ñö K (ùìû K)

instance : IsLocalization (Algebra.algebraMapSubmonoid (ùìû K) ‚Ñ§‚Å∞) K :=
  IsIntegralClosure.isLocalization ‚Ñ§ ‚Ñö K (ùìû K)

/-- A ‚Ñ§-basis of the ring of integers of `K`. -/
noncomputable def basis : Basis (Free.ChooseBasisIndex ‚Ñ§ (ùìû K)) ‚Ñ§ (ùìû K) :=
  Free.chooseBasis ‚Ñ§ (ùìû K)
#align number_field.ring_of_integers.basis NumberField.RingOfIntegers.basis

end RingOfIntegers

/-- A basis of `K` over `‚Ñö` that is also a basis of `ùìû K` over `‚Ñ§`. -/
noncomputable def integralBasis : Basis (Free.ChooseBasisIndex ‚Ñ§ (ùìû K)) ‚Ñö K :=
  Basis.localizationLocalization ‚Ñö (nonZeroDivisors ‚Ñ§) K (RingOfIntegers.basis K)
#align number_field.integral_basis NumberField.integralBasis

@[simp]
theorem integralBasis_apply (i : Free.ChooseBasisIndex ‚Ñ§ (ùìû K)) :
    integralBasis K i = algebraMap (ùìû K) K (RingOfIntegers.basis K i) :=
  Basis.localizationLocalization_apply ‚Ñö (nonZeroDivisors ‚Ñ§) K (RingOfIntegers.basis K) i
#align number_field.integral_basis_apply NumberField.integralBasis_apply

theorem mem_span_integralBasis {x : K} :
    x ‚àà Submodule.span ‚Ñ§ (Set.range (integralBasis K)) ‚Üî x ‚àà ùìû K := by
  rw [integralBasis, Basis.localizationLocalization_span, Subalgebra.range_isScalarTower_toAlgHom,
    Subalgebra.mem_toSubmodule]

theorem RingOfIntegers.rank : FiniteDimensional.finrank ‚Ñ§ (ùìû K) = FiniteDimensional.finrank ‚Ñö K :=
  IsIntegralClosure.rank ‚Ñ§ ‚Ñö K (ùìû K)
#align number_field.ring_of_integers.rank NumberField.RingOfIntegers.rank

section discriminant

open NumberField Matrix

/-- If `b` and `b'` are `‚Ñö`-bases of a number field `K` such that
`‚àÄ i j, IsIntegral ‚Ñ§ (b.toMatrix b' i j)` and `‚àÄ i j, IsIntegral ‚Ñ§ (b'.toMatrix b i j)` then
`discr ‚Ñö b = discr ‚Ñö b'`. -/
theorem _root_.Algebra.discr_eq_discr_of_toMatrix_coeff_isIntegral [NumberField K] [Fintype Œπ]
    [Fintype Œπ'] {b : Basis Œπ ‚Ñö K} {b' : Basis Œπ' ‚Ñö K} (h : ‚àÄ i j, IsIntegral ‚Ñ§ (b.toMatrix b' i j))
    (h' : ‚àÄ i j, IsIntegral ‚Ñ§ (b'.toMatrix b i j)) : Algebra.discr ‚Ñö b = Algebra.discr ‚Ñö b' := by
  replace h' : ‚àÄ i j, IsIntegral ‚Ñ§ (b'.toMatrix (b.reindex (b.indexEquiv b')) i j)
  ¬∑ intro i j
    convert h' i ((b.indexEquiv b').symm j)
-- Porting note: `simp; rfl` was `simpa`.
    simp; rfl
  classical
  rw [‚Üê (b.reindex (b.indexEquiv b')).toMatrix_map_vecMul b', Algebra.discr_of_matrix_vecMul,
    ‚Üê one_mul (Algebra.discr ‚Ñö b), Basis.coe_reindex, Algebra.discr_reindex]
  congr
  have hint : IsIntegral ‚Ñ§ ((b.reindex (b.indexEquiv b')).toMatrix b').det :=
    IsIntegral.det fun i j => h _ _
  obtain ‚ü®r, hr‚ü© := IsIntegrallyClosed.isIntegral_iff.1 hint
  have hunit : IsUnit r := by
    have : IsIntegral ‚Ñ§ (b'.toMatrix (b.reindex (b.indexEquiv b'))).det :=
      IsIntegral.det fun i j => h' _ _
    obtain ‚ü®r', hr'‚ü© := IsIntegrallyClosed.isIntegral_iff.1 this
    refine' isUnit_iff_exists_inv.2 ‚ü®r', _‚ü©
    suffices algebraMap ‚Ñ§ ‚Ñö (r * r') = 1 by
      rw [‚Üê RingHom.map_one (algebraMap ‚Ñ§ ‚Ñö)] at this
      exact (IsFractionRing.injective ‚Ñ§ ‚Ñö) this
    rw [RingHom.map_mul, hr, hr', ‚Üê det_mul, Basis.toMatrix_mul_toMatrix_flip, det_one]
  rw [‚Üê RingHom.map_one (algebraMap ‚Ñ§ ‚Ñö), ‚Üê hr]
  cases' Int.isUnit_iff.1 hunit with hp hm
  ¬∑ simp [hp]
  ¬∑ simp [hm]
#align algebra.discr_eq_discr_of_to_matrix_coeff_is_integral Algebra.discr_eq_discr_of_toMatrix_coeff_isIntegral

/-- The discriminant of a number field. -/
noncomputable def discr : ‚Ñ§ := Algebra.discr ‚Ñ§ (RingOfIntegers.basis K)

theorem coe_discr : (discr K : ‚Ñö) = Algebra.discr ‚Ñö (integralBasis K) := by
  rw [discr]
  exact (Algebra.discr_localizationLocalization ‚Ñ§ _ K (RingOfIntegers.basis K)).symm

theorem discr_ne_zero : discr K ‚â† 0 := by
  rw [‚Üê (Int.cast_injective (Œ± := ‚Ñö)).ne_iff, coe_discr]
  exact Algebra.discr_not_zero_of_basis ‚Ñö (integralBasis K)

theorem discr_eq_discr {Œπ : Type _} [Fintype Œπ] (b : Basis Œπ ‚Ñ§ (ùìû K)) :
    Algebra.discr ‚Ñ§ b = discr K := by
  let b‚ÇÄ := Basis.reindex (RingOfIntegers.basis K) (Basis.indexEquiv (RingOfIntegers.basis K) b)
  rw [Algebra.discr_eq_discr (ùìû K) b b‚ÇÄ, discr, Basis.coe_reindex, Algebra.discr_reindex]

end discriminant

end NumberField

namespace Rat

open NumberField

instance numberField : NumberField ‚Ñö where
  to_charZero := inferInstance
  to_finiteDimensional := by
  -- The vector space structure of `‚Ñö` over itself can arise in multiple ways:
  -- all fields are vector spaces over themselves (used in `Rat.finiteDimensional`)
  -- all char 0 fields have a canonical embedding of `‚Ñö` (used in `NumberField`).
  -- Show that these coincide:
    convert (inferInstance : FiniteDimensional ‚Ñö ‚Ñö)
#align rat.number_field Rat.numberField

/-- The ring of integers of `‚Ñö` as a number field is just `‚Ñ§`. -/
noncomputable def ringOfIntegersEquiv : ringOfIntegers ‚Ñö ‚âÉ+* ‚Ñ§ :=
  RingOfIntegers.equiv ‚Ñ§
#align rat.ring_of_integers_equiv Rat.ringOfIntegersEquiv

example : discr ‚Ñö = 1 := by
  let b‚ÇÄ := Basis.singleton (Fin 1) ‚Ñ§
  let b : Basis (Fin 1) ‚Ñ§ (ùìû ‚Ñö) := by
    refine Basis.map b‚ÇÄ ?_
    exact ringOfIntegersEquiv.toAddEquiv.toIntLinearEquiv.symm
  have := discr_eq_discr ‚Ñö b
  rw [‚Üê this]
  convert Algebra.discr_def ‚Ñ§ b
  rw [Matrix.det_unique, Algebra.traceMatrix_apply, Basis.map_apply, Basis.singleton_apply]
  dsimp only
  have : LinearEquiv.symm
    (AddEquiv.toIntLinearEquiv (RingEquiv.toAddEquiv ringOfIntegersEquiv)) 1 = 1 := sorry
  rw [this]
  rw [Algebra.traceForm_apply, mul_one]
  rw [Algebra.trace_eq_matrix_trace b]
  norm_num

theorem discr : discr ‚Ñö = 1 := by
  let b : Basis (Fin 1) ‚Ñ§ (ùìû ‚Ñö) :=
    Basis.map (Basis.singleton (Fin 1) ‚Ñ§) ringOfIntegersEquiv.toAddEquiv.toIntLinearEquiv.symm
  calc NumberField.discr ‚Ñö
    _ = Algebra.discr ‚Ñ§ b := by convert (discr_eq_discr ‚Ñö b).symm
    _ = Matrix.det (Algebra.traceMatrix ‚Ñ§ b) := rfl
    _ = Algebra.trace ‚Ñ§ (ùìû ‚Ñö) 1 := ?_
    _ = 1                 := by rw [Algebra.trace_eq_matrix_trace b]; norm_num
  rw [Matrix.det_unique, Algebra.traceMatrix_apply, Basis.map_apply, Basis.singleton_apply,
    AddEquiv.toIntLinearEquiv_symm, AddEquiv.coe_toIntLinearEquiv, RingEquiv.toAddEquiv_eq_coe,
    show (AddEquiv.symm ringOfIntegersEquiv) (1 : ‚Ñ§) = (1 : ùìû ‚Ñö) by
      rw [AddEquiv.symm_apply_eq, RingEquiv.coe_toAddEquiv, map_one],
    Algebra.traceForm_apply, mul_one]

end Rat

namespace AdjoinRoot

section

open scoped Polynomial

attribute [-instance] algebraRat

/-- The quotient of `‚Ñö[X]` by the ideal generated by an irreducible polynomial of `‚Ñö[X]`
is a number field. -/
instance {f : Polynomial ‚Ñö} [hf : Fact (Irreducible f)] : NumberField (AdjoinRoot f) where
  to_charZero := charZero_of_injective_algebraMap (algebraMap ‚Ñö _).injective
  to_finiteDimensional := by convert (AdjoinRoot.powerBasis hf.out.ne_zero).finiteDimensional

end

end AdjoinRoot
