/-
Copyright (c) 2023 Xavier Roblot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Xavier Roblot
-/
import Mathlib.NumberTheory.NumberField.Basic
import Mathlib.RingTheory.Localization.NormTrace

/-!
# Number field discriminant
This file defines the discrimiant of a number field.

-/

namespace NumberField

open NumberField Matrix

variable (K : Type _) [Field K] [NumberField K]

/-- The discriminant of a number field. -/
noncomputable def discr : ‚Ñ§ := Algebra.discr ‚Ñ§ (RingOfIntegers.basis K)

theorem coe_discr : (discr K : ‚Ñö) = Algebra.discr ‚Ñö (integralBasis K) := by
  rw [discr]
  exact (Algebra.discr_localizationLocalization ‚Ñ§ _ K (RingOfIntegers.basis K)).symm

theorem discr_ne_zero : discr K ‚â† 0 := by
  rw [‚Üê (Int.cast_injective (Œ± := ‚Ñö)).ne_iff, coe_discr]
  exact Algebra.discr_not_zero_of_basis ‚Ñö (integralBasis K)

theorem discr_eq_discr {Œπ : Type _} [Fintype Œπ] [DecidableEq Œπ] (b : Basis Œπ ‚Ñ§ (ùìû K)) :
    Algebra.discr ‚Ñ§ b = discr K := by
  let b‚ÇÄ := Basis.reindex (RingOfIntegers.basis K) (Basis.indexEquiv (RingOfIntegers.basis K) b)
  rw [Algebra.discr_eq_discr (ùìû K) b b‚ÇÄ, discr, Basis.coe_reindex, Algebra.discr_reindex]

end NumberField

namespace Rat

open NumberField

theorem discr : discr ‚Ñö = 1 := by
  let b : Basis (Fin 1) ‚Ñ§ (ùìû ‚Ñö) :=
    Basis.map (Basis.singleton (Fin 1) ‚Ñ§) ringOfIntegersEquiv.toAddEquiv.toIntLinearEquiv.symm
  calc NumberField.discr ‚Ñö
    _ = Algebra.discr ‚Ñ§ b := by convert (discr_eq_discr ‚Ñö b).symm
    _ = Matrix.det (Algebra.traceMatrix ‚Ñ§ b) := rfl
    _ = Algebra.trace ‚Ñ§ (ùìû ‚Ñö) 1 := ?_
    _ = 1                 := by rw [Algebra.trace_eq_matrix_trace b]; norm_num
  rw [Matrix.det_unique, Algebra.traceMatrix_apply, Basis.map_apply, Basis.singleton_apply,
    AddEquiv.toIntLinearEquiv_symm, AddEquiv.coe_toIntLinearEquiv, RingEquiv.toAddEquiv_eq_coe,
    show (AddEquiv.symm ringOfIntegersEquiv) (1 : ‚Ñ§) = (1 : ùìû ‚Ñö) by
      rw [AddEquiv.symm_apply_eq, RingEquiv.coe_toAddEquiv, map_one],
    Algebra.traceForm_apply, mul_one]

end Rat
